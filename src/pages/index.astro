<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gorila Multijugador</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
  </head>
  <body class="bg-gray-900 text-white min-h-screen flex flex-col justify-between p-4">
    <!-- Gorila -->
    <div id="gorilaContainer" class="w-full flex justify-center mt-4">
      <img src="../../public/gorilla.webp" alt="Gorila" class="w-32 md:w-40 h-auto" />
    </div>

    <!-- √Årea principal -->
    <div class="w-full max-w-lg md:max-w-xl p-4 sm:p-6 bg-gray-800 rounded-xl shadow-lg flex flex-col mx-auto mt-6">

      <!-- Unirse -->
      <div class="flex flex-col sm:flex-row gap-2 mb-4">
        <input id="roomId" type="text" placeholder="ID de la sala"
          class="flex-1 px-3 py-2 rounded bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-green-500" />
        <button id="joinBtn"
          class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded font-bold transition w-full sm:w-auto">
          Unirse
        </button>
      </div>

      <!-- Juego -->
      <div id="gameArea" class="mb-4 hidden flex flex-col items-center">
        <div class="flex flex-col w-full gap-2">
          <button id="startTimerBtn"
            class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded font-bold transition w-full">
            ‚è±Ô∏è Iniciar Tiempo
          </button>
          <button id="attackBtn"
            class="bg-red-600 hover:bg-red-700 px-4 py-2 rounded font-bold transition w-full">
            üí¢ Atacar al Gorila
          </button>
          <button id="resetBtn"
            class="bg-yellow-600 hover:bg-yellow-700 px-4 py-2 rounded font-bold transition w-full hidden">
            üîÑ Reiniciar Juego
          </button>
        </div>

        <div class="mt-4 text-center">
          <p id="status" class="font-semibold text-yellow-300 text-base md:text-lg mb-2"></p>
          <p id="timer"
            class="font-bold text-2xl md:text-3xl text-green-300 bg-gray-700 px-6 py-2 rounded shadow-inner tracking-wider">
            Tiempo: 0 s
          </p>
        </div>
      </div>

      <!-- Log -->
      <div id="log"
        class="bg-gray-700 p-3 rounded h-36 overflow-y-auto text-sm font-mono whitespace-pre-line mb-4 border border-green-400">
      </div>
    </div>

    <!-- Avatares -->
    <div id="playersContainer"
      class="w-full max-w-lg md:max-w-xl mx-auto flex flex-wrap justify-center gap-4 p-3 rounded bg-green-700 bg-opacity-30 mb-6">
    </div>

    <script type="module">
      import { io } from "https://cdn.socket.io/4.7.2/socket.io.esm.min.js";

      let socket;
      let playerId;

      window.addEventListener("DOMContentLoaded", () => {
        const joinBtn = document.getElementById("joinBtn");
        const startTimerBtn = document.getElementById("startTimerBtn");
        const attackBtn = document.getElementById("attackBtn");
        const resetBtn = document.getElementById("resetBtn");
        const roomInput = document.getElementById("roomId");
        const gameArea = document.getElementById("gameArea");
        const log = document.getElementById("log");
        const status = document.getElementById("status");
        const timerDisplay = document.getElementById("timer");
        const playersContainer = document.getElementById("playersContainer");

        const appendLog = (message) => {
          log.innerText += message + "\n";
          log.scrollTop = log.scrollHeight;
        };

        joinBtn.addEventListener("click", () => {
          const roomId = roomInput.value.trim();
          if (!roomId) return;

          socket = io("https://server-kq0v.onrender.com");
          playerId = socket.id;

          socket.emit("joinRoom", roomId);
          gameArea.classList.remove("hidden");
          appendLog(`üü¢ Te uniste a la sala ${roomId}`);

          socket.on("notification", (message) => appendLog(`üì¢ ${message}`));

          socket.on("attack", (message) => {
            appendLog(`üí• ${message}`);
            status.innerText = "¬°Has sido atacado!";
          });

          socket.on("hpUpdate", (hp) => {
            status.innerText = `üß† HP del Gorila: ${hp}`;
            if (hp === 0) {
              attackBtn.disabled = true;
              resetBtn.classList.remove("hidden");
            }
          });

          socket.on("timer", (seconds) => {
            timerDisplay.innerText = `Tiempo: ${seconds} s`;
          });

          socket.on("timerStopped", (seconds) => {
            timerDisplay.innerText = `‚èπÔ∏è ¬°Tiempo final: ${seconds} s!`;
            startTimerBtn.disabled = false;
          });

          socket.on("disableStartButton", () => {
            startTimerBtn.disabled = true;
          });

          socket.on("playersUpdate", (players) => {
            playersContainer.innerHTML = "";
            players.forEach((id, index) => {
              const playerAvatar = document.createElement("img");
              playerAvatar.src = "../../public/hombre.webp";
              playerAvatar.alt = `Jugador ${index + 1}`;
              playerAvatar.title = `Jugador ${index + 1}`;
              playerAvatar.className = "w-12 h-12 rounded-full border-2 border-green-500";
              playersContainer.appendChild(playerAvatar);
            });
          });

          socket.on("gameReset", () => {
            attackBtn.disabled = false;
            startTimerBtn.disabled = false;
            resetBtn.classList.add("hidden");
            status.innerText = "üß† HP del Gorila: 1000";
            timerDisplay.innerText = "Tiempo: 0 s";
            appendLog("üîÑ El juego ha sido reiniciado");
          });
        });

        attackBtn.addEventListener("click", () => {
          const roomId = roomInput.value.trim();
          if (!roomId || !socket) return;
          socket.emit("attack", roomId);
          appendLog("üöÄ Ataque enviado");
          status.innerText = "Esperando respuesta...";
        });

        startTimerBtn.addEventListener("click", () => {
          const roomId = roomInput.value.trim();
          if (!roomId || !socket) return;
          socket.emit("startTimer", roomId);
          appendLog("‚è≥ Temporizador iniciado");
        });

        resetBtn.addEventListener("click", () => {
          const roomId = roomInput.value.trim();
          if (!roomId || !socket) return;
          socket.emit("resetGame", roomId);
        });
      });
    </script>
  </body>
</html>
